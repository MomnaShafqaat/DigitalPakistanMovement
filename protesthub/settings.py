"""
Django settings for protesthub project.
Generated by 'django-admin startproject' using Django 5.0.6.
"""

import os
from pathlib import Path
# Add to the top of settings.py
from corsheaders.defaults import default_headers
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here-change-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition - ORDER IS CRITICAL FOR MIGRATIONS
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',           # Provides built-in user authentication
    'django.contrib.contenttypes',   # Tracks models in database
    'django.contrib.sessions',       # Manages user sessions
    'django.contrib.messages',       # Handles flash messages
    'django.contrib.staticfiles',    # Serves static files (CSS, JS, images)
    'django.contrib.sites',          # Required for allauth
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
   
    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',
    'crispy_bootstrap5',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    
    # OUR CUSTOM APPS - MUST BE AFTER BUILT-IN APPS
    'users',        # Custom user model - MUST BE FIRST
    'protests',     # Protest management
    'awareness',    # Blog and awareness posts
    'updates',      # Live protest updates

    'django_filters',
]

# Middleware - processes requests/responses
MIDDLEWARE = [
     'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'protesthub.urls'

# Template configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'protesthub.wsgi.application'

# Database configuration - SQLite is file-based, no server needed
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Social account providers configuration
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'APP': {
            'client_id': 'your-google-client-id',  # You'll get this from Google Cloud Console
            'secret': 'your-google-client-secret',
            'key': ''
        }
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'first_name',
            'last_name',
            'email',
            'name',
            'verified',
        ],
        'EXCHANGE_TOKEN': True,
        'APP': {
            'client_id': 'your-facebook-app-id',  # You'll get this from Facebook Developer
            'secret': 'your-facebook-app-secret',
            'key': ''
        }
    }
}
# CORS settings (for React frontend)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React development server
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True
# CORS headers to allow
CORS_ALLOW_HEADERS = list(default_headers) + [
    'X-CSRFTOKEN',
]
# For development - you can disable CSRF for API (be careful in production)
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_HTTPONLY = True

# For production, you'd want these to be True
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS

# REST Framework settings to handle CSRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
}


# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Custom user model - TELLS DJANGO TO USE OUR USER MODEL INSTEAD OF DEFAULT
AUTH_USER_MODEL = 'users.CustomUser'

# Crispy Forms configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Login URLs
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'login'

# =============================================================================
# ALLAUTH CONFIGURATION - UPDATED (NO DEPRECATION WARNINGS)
# =============================================================================

# Site ID - REQUIRED for allauth
SITE_ID = 1

# Authentication backends - REQUIRED for allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings - UPDATED VERSION (no deprecation warnings)
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_LOGIN_METHODS = {'username', 'email'}  # Login with username OR email
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']  # Required signup fields
ACCOUNT_SESSION_REMEMBER = True    # Remember user login
ACCOUNT_LOGOUT_ON_GET = False      # Show confirmation page on logout

# Email configuration (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Print emails to console

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Allauth settings for social login
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_STORE_TOKENS = True

# Login redirect
ACCOUNT_LOGOUT_REDIRECT_URL = '/'